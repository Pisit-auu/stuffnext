generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}
model Asset {
  id               Int             @id @default(autoincrement())
  name             String
  img              String?
  assetid          String          @unique
  categoryId       String
  availableValue   Int             @default(0)
  unavailableValue Int             @default(0)
  createdAt        DateTime        @default(now())
  category         Category        @relation(fields: [categoryId], references: [idname], onDelete: Cascade)
  locations        AssetLocation[]
  borrow           borrow[]
}

model Category {
  id     Int     @id @default(autoincrement())
  idname String  @unique
  name   String
  asset  Asset[]
  
}

model Location {
  id           Int             @id @default(autoincrement())
  namelocation String          @unique
  nameteacher  String?
  assets       AssetLocation[]
  borrow       borrow[]
  categoryIdroom       Int?
  categoryroom   Categoryroom?  @relation(fields: [categoryIdroom], references: [id], onDelete: Cascade)
}
model Categoryroom {
  id     Int     @id @default(autoincrement())
  name   String @unique
  location  Location[]
}
model AssetLocation {
  id                      Int      @id @default(autoincrement())
  assetId                 String
  locationId              String
  inRoomaunavailableValue Int      @default(0)
  inRoomavailableValue    Int      @default(1)
  asset                   Asset    @relation(fields: [assetId], references: [assetid], onDelete: Cascade)
  location                Location @relation(fields: [locationId], references: [namelocation], onDelete: Cascade)

  @@unique([assetId, locationId])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  username  String   @unique
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  surname   String?
  tel       String?
  role      Role     @default(user)
  borrow    borrow[]
}

model borrow {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  dayReturn        DateTime?
  Borrowstatus     Status    @default(w)
  ReturnStatus     Status    @default(w)
  userId           Int
  assetId          String
  valueBorrow      Int       @default(1)
  borrowLocationId String
  returnLocationId String
  note             String?
  asset            Asset     @relation(fields: [assetId], references: [assetid], onDelete: Cascade)
  borrowLocation   Location  @relation(fields: [borrowLocationId], references: [namelocation], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  user
  admin
}

enum Status {
  w
  c
}
